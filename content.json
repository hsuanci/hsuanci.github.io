{"meta":{"title":"Hsuan Ho | Blog","subtitle":"Hsuan Ho | Blog","description":"Hsuan Ho | Blog","author":"Hsuan Ho","url":"https://hsuanci.github.io","root":"/"},"pages":[{"title":"分類","date":"2024-06-23T12:53:04.524Z","updated":"2024-06-23T12:53:04.524Z","comments":false,"path":"categories/index.html","permalink":"https://hsuanci.github.io/categories/index.html","excerpt":"","text":""},{"title":"關於","date":"2024-06-23T12:53:04.524Z","updated":"2024-06-23T12:53:04.524Z","comments":false,"path":"about/index.html","permalink":"https://hsuanci.github.io/about/index.html","excerpt":"","text":"See &gt; Link to personal blog"},{"title":"標籤","date":"2024-06-23T12:53:04.524Z","updated":"2024-06-23T12:53:04.524Z","comments":false,"path":"tags/index.html","permalink":"https://hsuanci.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"探索職涯系列 2024 年 第一站 實體面試","slug":"interview_20240620","date":"2024-06-20T06:00:00.000Z","updated":"2024-07-04T13:32:07.978Z","comments":true,"path":"interview/interview_20240620/","link":"","permalink":"https://hsuanci.github.io/interview/interview_20240620/","excerpt":"2024 第二季面試 第一站 : 專案 ? 產品 ?","text":"2024 第二季面試 第一站 : 專案 ? 產品 ? Table of Cotents 引言 實體面試 實體面試流程 技術考試 技術概念回顧 Bit flag MSSQL DateTime 資料型別 C# LINQ 延遲載入 JavaScript Event Loop, Promise, microtask &amp; macrotask 個人回饋 引言# 回顧我五年的工程師生涯，每段經歷都有其獨特的任務和挑戰，讓我在不斷成長和學習中積累了豐富的經驗。接下來又是下一段經歷的準備期，希望藉由撰寫此篇章能夠從準備其中更認識自己，找到下個目標。 實體面試# 很榮幸獲得了一間位於大安區人數約為10人公司的面試邀約。公司正在發展自有產品，找新職員的目的是擴編。產品內容是專門為土木工程營造石設計的管理系統，相當有趣。我本是土木系出身，同學大多在營造廠擔任主任等職位。因此理解工地要做系統化管理的困難度。困難點在於營造業雖有一定的流程，但會因應工地的條件去做變化，執行方向就會不同，沒有一定流程，對系統化而言是種挑戰。 實體面試流程# 自我/作品介紹 (技術主管) 面試者準備相關資料，面試時與技術主管介紹，途中會問一些問題，多是每個經歷的技術提問。 技術考試 此部分會寫在技術考試 人資面談 上份工作離職理由、為什麼選擇面試此份工作、期待薪資。 技術考試# 提出需求，立即設計出符合需求的資料庫結構 C# LINQ JavaScript Event Loop 技術概念回顧# 此部分僅針對筆者當下技術上不夠清楚部分，進行釐清。 Bit flag# Q : 如果今天要設計一個權限系統，你會如何設計 ? 筆者 : Q : 如果這個 Permission 只能儲存一筆 user 的權限資料要如何改 ? 筆者 : 可以開 4個 prop， 例如 canReadstatus (bit) Q : 如果只用一個 prop 能不能做到 ? 筆者 : 用數字代表大於 等於 ? Ans : 你有聽過 C# Flag enums ? 什麼是 Flag enums ?# 假設現在我們有四個權限，分別是讀、寫、執行、分享。 如果用 Boolean 概念看，如下所示 讀 寫 執行 分享 二進位值 1 0 0 0 8 0 1 0 0 4 這些數值可以轉為二進位，再用 C# 比較概念去撰寫以下程式碼，進而判斷權限，是不是很簡潔呢 ? 1Permissions readWrite = Permissions.Read | Permissions.Write; // 1100 = 12 參考資料 : C#: 位元旗標 (Bit flag) 與列舉 MSSQL DateTime 資料型別# C# LINQ 延遲載入# JavaScript Event Loop, Promise, microtask &amp; macrotask# 個人回饋# 待補","categories":[{"name":"interview","slug":"interview","permalink":"https://hsuanci.github.io/categories/interview/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://hsuanci.github.io/tags/C/"},{"name":"SQL","slug":"SQL","permalink":"https://hsuanci.github.io/tags/SQL/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://hsuanci.github.io/tags/JavaScript/"}]},{"title":".NET Core CLI 筆者常用指令整理","slug":"net-core-command","date":"2020-09-13T16:00:00.000Z","updated":"2024-06-23T12:59:25.376Z","comments":true,"path":"backend/net-core-command/","link":"","permalink":"https://hsuanci.github.io/backend/net-core-command/","excerpt":".NET Core CLI 常用指令","text":".NET Core CLI 常用指令 Table of Cotents 前言 CLI 指令 前言# 記錄筆者常用的 .NET Core 指令 CLI 指令# 1234567891011121314151617181920212223$ dotnet --version (顯示Version)$ dotnet new [type of project] -n [project name] $ dotnet new console (new console project) $ dotnet new mvc (new mvc project) $ dotnet new webapi (new api project)$ dotnet add package (加入NeGet套件)# EF Farmwork &gt; 相依套件$ dotnet add package Microsoft.EntityFrameworkCore.SqlServer$ dotnet add package Microsoft.EntityFrameworkCore.Design$ dotnet add package Microsoft.EntityFrameworkCore.Tools# 建置$ dotnet build (建置) -o [ouput path]# 清除建置$ dotnet clean# 執行$ dotnet run# 發行$ dotnet publish &amp; -c Release # 限定版本 (win10x64) &amp; -r win10-x64 --self-contained # 全部包裝成執行檔 exe &amp; -r win10-x64 --no-self-contained","categories":[{"name":"backend","slug":"backend","permalink":"https://hsuanci.github.io/categories/backend/"}],"tags":[{"name":".NET Core","slug":"NET-Core","permalink":"https://hsuanci.github.io/tags/NET-Core/"}]},{"title":"Hexo 超新手起手式 打造專屬自己的 Blog","slug":"hexo","date":"2020-05-24T07:00:00.000Z","updated":"2024-06-23T12:59:25.376Z","comments":true,"path":"server/hexo/","link":"","permalink":"https://hsuanci.github.io/server/hexo/","excerpt":"程序員都該有自己的 Blog ? 用來紀錄自己有多辛苦。 就讓筆者簡單紀錄一下，如何使用 Hexo 來建置自己的 Blog 系統吧 ！ 🏃","text":"程序員都該有自己的 Blog ? 用來紀錄自己有多辛苦。 就讓筆者簡單紀錄一下，如何使用 Hexo 來建置自己的 Blog 系統吧 ！ 🏃 Table of Cotents 前言 起手式第一步 (環境設置) 起手式第二步 (HelloWorld) 邁向進階的第一步 (客製化屬於自己的 Blog) 1. 基本網站設定 (_config.yml) 2. 引入主題 Theme 方式 專案設定引用主題 後記 筆者常用 CLI 指令 套用 GA 4 Plugins 前言# 以前隨手會使用 HackMD 快速記錄下手邊的事情，會議、Bug 解決辦法等，真的是相當方便。但身為工程師還是要自己搞一個 Blog 伺服器，凸顯一下自己建置伺服器的能力，才是一個合格的工程師。因此本篇就此誕生了，讓我們簡單紀錄一下建置 Hexo 的過程吧 ! 起手式第一步 (環境設置)# 讓我們先使用 Google 查詢 Hexo ! https://hexo.io 進入官網就看到一行指令 $ npm install hexo-cli -g，請打開你習慣的終端機工具執行此指令。輸入指令前請安裝 Node.Js，Hexo 基於 Node.Js 環境下執行。 起手式第二步 (HelloWorld)# 寫程式第一件事就是… HelloWorld (建立一個起始專案)。 123456# 建立起始專案$ hexo init [your blog name]# 使用 CD 將工作目錄移至專案資料夾$ cd [your blog name]# 執行 hexo &gt; 沒意外的話就可以看到 Hexo 的 HelloWorld$ hexo server 網址前往 http://localhost:4000。看到以下畫面，代表你已經成功的 HelloWorld 完成建置 Blog 的一大步了。 邁向進階的第一步 (客製化屬於自己的 Blog)# 我們已經完成了環境建置，也建立了我們的 HelloWorld。是時候該往進階的路走了，來吧 ! 我們著手開始進行設定屬於自己的 Blog。 客製化可以分為以下 基本的網頁設定，標題等。 專案引入前輩們寫好的主題。 1. 基本網站設定 (_config.yml)# 網站基本設定資訊可以在專案資料夾 [Hexo 專案名稱]/_config.yml 找到。 https://hexo.io/zh-tw/docs/configuration 詳細內容可以參考 hexo 的配置說明 2. 引入主題 Theme 方式# 官網有提供如何客製化自己主題的說明文件。本篇為筆記如何 引入前輩們寫好的主題 步驟，所有主題皆可參考本篇步驟進行。 第一步先前往官網提供主題頁面找到自己喜歡的主題。 註 1 :點擊圖片查看該主題的 Demo 註 2 :點擊文字 Pure 前往該主題作者的 Github 頁面 本範例使用 Pure 作者的 Github 主題作為引用範例。 專案設定引用主題# 第一步 : Clone 主題的 repository 至專案 12cd [Hexo 專案位置]git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 第二步 : 至[Hexo 專案名稱]/_config.yml中找到 theme: landscape，改為 theme: pure 改到這邊就成功套用啦。 個人化的設定至 [Hexo 專案名稱]/themes/pure/_config.yml 中更改，更改的內容會依照使用主題而不同，此部分參考主題作者的說明更改。 後記# 筆者常用 CLI 指令# 參考自官網連結 1234567891011# init new project$ hexo init [folder]# create new template by layout$ hexo new [layout] &lt;title&gt;# 發布靜態檔案 (可使用 nginx or iis 等伺服器架設)$ hexo generate# 執行測試環境$ hexo server# 清除快取檔案$ hexo clean 套用 GA 4# 施工中。 Plugins# 施工中。","categories":[{"name":"server","slug":"server","permalink":"https://hsuanci.github.io/categories/server/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hsuanci.github.io/tags/Hexo/"},{"name":"Node.js","slug":"Node-js","permalink":"https://hsuanci.github.io/tags/Node-js/"}]}],"categories":[{"name":"interview","slug":"interview","permalink":"https://hsuanci.github.io/categories/interview/"},{"name":"backend","slug":"backend","permalink":"https://hsuanci.github.io/categories/backend/"},{"name":"server","slug":"server","permalink":"https://hsuanci.github.io/categories/server/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://hsuanci.github.io/tags/C/"},{"name":"SQL","slug":"SQL","permalink":"https://hsuanci.github.io/tags/SQL/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://hsuanci.github.io/tags/JavaScript/"},{"name":".NET Core","slug":"NET-Core","permalink":"https://hsuanci.github.io/tags/NET-Core/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hsuanci.github.io/tags/Hexo/"},{"name":"Node.js","slug":"Node-js","permalink":"https://hsuanci.github.io/tags/Node-js/"}]}